!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("JsPriorityQueue",[],e):"object"==typeof exports?exports.JsPriorityQueue=e():t.JsPriorityQueue=e()}(self,(()=>(()=>{"use strict";var t={d:(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Heap:()=>s,SimpleMaxHeap:()=>i,SimpleMinHeap:()=>a});const s=class{get count(){return this.size}SENTRY;data=[];size=0;compare;selfCompare(t,e){return this.compare(t,e)}validInitParams(){if(void 0===this.SENTRY)throw"can not insert queue before the sentry been set ";if(void 0===this.compare)throw"can not insert queue before the compare callback been set "}constructor(...t){t.forEach(((t,e)=>{this.data[e+1]=t,this.size++})),this.buildHeap()}setSentry(t){this.SENTRY=t,this.data[0]=this.SENTRY}setCompare(t){this.compare=t}getMin(){if(0==this.size)throw"can not get element from an empty heap";return this.data[1]}isEmpty(){return 0===this.size}insertQueue(t){if(this.validInitParams(),this.selfCompare(this.SENTRY,t))throw`can not insert val bigger or smaller than ${this.SENTRY}`;this.size++;let e=this.size;for(;this.selfCompare(this.data[Math.floor(e/2)],t);)this.data[e]=this.data[Math.floor(e/2)],e=Math.floor(e/2);this.data[e]=t}deleteQueue(){if(this.isEmpty())throw"can not delete element from empty heap";let t=this.data[1],e=this.data[this.size--];return this.data[1]=e,this.data.length--,this.percDown(1),t}percDown(t){let e,s,i=this.data[t];for(e=t;2*e<=this.size&&(s=2*e,s!=this.size&&this.selfCompare(this.data[s+1],this.data[s])&&s++,!this.selfCompare(this.data[s],i));e=s)this.data[e]=this.data[s];this.data[e]=i}buildHeap(){for(let t=Math.floor(this.size/2);t>0;t--)this.percDown(t)}},i=class extends s{constructor(...t){super(...t),this.setSentry(1/0),this.setCompare(((t,e)=>t<=e))}},a=class extends s{constructor(...t){super(...t),this.setSentry(-1/0),this.setCompare(((t,e)=>t>=e))}};return e})()));
//# sourceMappingURL=index.js.map