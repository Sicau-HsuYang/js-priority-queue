{"version":3,"file":"index.js","mappings":"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","sources":["webpack://JsPriorityQueue/webpack/universalModuleDefinition","webpack://JsPriorityQueue/webpack/bootstrap","webpack://JsPriorityQueue/webpack/runtime/define property getters","webpack://JsPriorityQueue/webpack/runtime/hasOwnProperty shorthand","webpack://JsPriorityQueue/webpack/runtime/make namespace object","webpack://JsPriorityQueue/./src/components/Heap.ts","webpack://JsPriorityQueue/./src/components/SimpleMaxHeap.ts","webpack://JsPriorityQueue/./src/components/SimpleMinHeap.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"JsPriorityQueue\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JsPriorityQueue\"] = factory();\n\telse\n\t\troot[\"JsPriorityQueue\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * 抽象堆\n */\nclass Heap<T> {\n  public get count() {\n    return this.size;\n  }\n  /**\n   * 定义哨兵的最值，所有插入堆的元素都必须和这个值比较\n   */\n  protected SENTRY!: T;\n\n  /**\n   * 定义一个存储数据的内存空间\n   */\n  private data: Array<T> = [];\n\n  /**\n   * 当前堆的元素个数\n   */\n  private size: number = 0;\n\n  /**\n   * 比较函数, 通过先前和当前元素的比较，决定是否将当前元素提置先前元素前\n   */\n  protected compare!: (preVal: T, curVal: T) => boolean | undefined;\n\n  /**\n   * 自身用于比较的函数\n   * @param preVal 被比较的值\n   * @param curVal 当前值\n   */\n  private selfCompare(preVal: T, curVal: T) {\n    return this.compare(preVal, curVal);\n  }\n\n  private validInitParams() {\n    if (this.SENTRY === void 0) {\n      throw `can not insert queue before the sentry been set `;\n    }\n    if (this.compare === void 0) {\n      throw `can not insert queue before the compare callback been set `;\n    }\n  }\n\n  constructor(...initElements: Array<T>) {\n    // 初始化数组元素\n    initElements.forEach((v, i) => {\n      this.data[i + 1] = v;\n      this.size++;\n    });\n    this.buildHeap();\n  }\n\n  /**\n   * 设置哨兵元素\n   * @param sentryEle\n   */\n  setSentry(sentryEle: T) {\n    this.SENTRY = sentryEle;\n    this.data[0] = this.SENTRY;\n  }\n\n  /**\n   * 设置比较函数\n   * @param compareFunc 比较函数\n   */\n  setCompare(compareFunc: (preEle: T, curEle: T) => boolean) {\n    this.compare = compareFunc;\n  }\n\n  /**\n   * 获取堆中最小的元素\n   * @returns\n   */\n  public getMin() {\n    if (this.size == 0) {\n      throw `can not get element from an empty heap`;\n    }\n    return this.data[1];\n  }\n\n  /**\n   * 判断堆是否为空\n   * @returns\n   */\n  public isEmpty() {\n    return this.size === 0;\n  }\n\n  /**\n   * 向堆中插入一个合法值\n   * @param val\n   */\n  public insertQueue(val: T) {\n    this.validInitParams();\n    if (this.selfCompare(this.SENTRY, val)) {\n      throw `can not insert val bigger or smaller than ${this.SENTRY}`;\n    }\n    // 堆的容量扩充1\n    this.size++;\n    // 让i指向当前新位置\n    let i = this.size;\n    // 因为有哨兵的关系，不需要添加约束条件 i > 0\n    // this.#data[Math.floor(i / 2)] > val\n    while (this.selfCompare(this.data[Math.floor(i / 2)], val)) {\n      this.data[i] = this.data[Math.floor(i / 2)];\n      i = Math.floor(i / 2);\n    }\n    this.data[i] = val;\n  }\n\n  /**\n   * 获取堆中的最小元素\n   * @returns {T}\n   */\n  protected deleteQueue() {\n    if (this.isEmpty()) {\n      throw \"can not delete element from empty heap\";\n    }\n    // 取出堆顶的元素\n    let firstVal = this.data[1];\n    let temp = this.data[this.size--];\n    this.data[1] = temp;\n    // JavaScript语言需要进行这一步，让数组的规模缩小，释放空间\n    this.data.length--;\n    this.percDown(1);\n    return firstVal;\n  }\n\n  /**\n   * 下滤：将堆中以堆data[p]为根的子堆调整为最小堆\n   * @param p 根节点索引\n   */\n  protected percDown(p: number) {\n    let parent: number, child: number;\n    let temp = this.data[p]; /* 取出根结点存放的值 */\n    for (parent = p; parent * 2 <= this.size; parent = child) {\n      child = parent * 2;\n      /* child指向左右子结点的较?者 */\n      if (child != this.size && this.selfCompare(this.data[child + 1], this.data[child])) {\n        child++;\n      }\n      /* 找到了合适位置 */\n      if (this.selfCompare(this.data[child], temp)) {\n        break;\n      } else {\n        /* 下滤X */\n        this.data[parent] = this.data[child];\n      }\n    }\n    this.data[parent] = temp;\n  }\n\n  /**\n   * 构建堆\n   */\n  protected buildHeap() {\n    /* 调整data中的元素，使满足最堆的有序性  */\n    /* 这里所有size个元素已经存在data[]中 */\n    /* 从最后一个结点的父节点开始，到根结点1 */\n    for (let i = Math.floor(this.size / 2); i > 0; i--) {\n      this.percDown(i);\n    }\n  }\n}\n\nexport default Heap;\n","import Heap from \"./Heap\";\n\nclass SimpleMaxHeap extends Heap<number> {\n  constructor(...initElements: number[]) {\n    super(...initElements);\n    this.setSentry(Infinity);\n    this.setCompare((preVal, curVal) => {\n      return preVal <= curVal;\n    });\n  }\n\n  deleteMax() {\n    return this.deleteQueue();\n  }\n}\n\nexport default SimpleMaxHeap;\n","import Heap from \"./Heap\";\n\nclass SimpleMinHeap extends Heap<number> {\n  constructor(...initElements: number[]) {\n    super(...initElements);\n    this.setSentry(-Infinity);\n    this.setCompare((preVal, curVal) => {\n      return preVal >= curVal;\n    });\n  }\n\n  deleteMin() {\n    return this.deleteQueue();\n  }\n}\n\nexport default SimpleMinHeap;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","count","this","size","SENTRY","data","compare","selfCompare","preVal","curVal","validInitParams","constructor","initElements","forEach","v","i","buildHeap","setSentry","sentryEle","setCompare","compareFunc","getMin","isEmpty","insertQueue","val","Math","floor","deleteQueue","firstVal","temp","length","percDown","p","parent","child","super","Infinity","deleteMax","deleteMin"],"sourceRoot":""}